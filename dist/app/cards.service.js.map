{"version":3,"file":"cards.service.js","sourceRoot":"","sources":["cards.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA8B,eAAe,CAAC,CAAA;AAI9C,QAAO,6BAA6B,CAAC,CAAA;AAIrC;IAGE,sBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFtB,aAAQ,GAAG,+CAA+C,CAAC;IAElC,CAAC;IAClC,kCAAW,GAAX;QACE,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,eAAe,EAAE,oDAAoD,EAAC,CAAC,CAAC;QAClG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAC,OAAO,EAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAClD,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAApB,CAAoB,CAAC;aACtC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAEF,oCAAa,GAAb,UAAc,GAAG;QACf,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,eAAe,EAAE,oDAAoD,EAAC,CAAC,CAAC;QAClG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAC,aAAa,GAAC,GAAG,EAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAC5D,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAA3B,CAA2B,CAAC;aAC7C,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IACO,kCAAW,GAAnB,UAAoB,KAAU;QAC7B,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,2BAAI,GAAJ,UAAK,QAAQ;QACX,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;IAC1C,CAAC;IA5BH;QAAC,iBAAU,EAAE;;oBAAA;IA6Bb,mBAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,oBAAY,eA4BxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\nimport { Card } from './card';\r\nimport { Sets } from './sets';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\n\r\n@Injectable()\r\nexport class CardsService {\r\n  private cardsUrl = \"https://omgvamp-hearthstone-v1.p.mashape.com/\";\r\n\r\n  constructor(private http: Http) {}\r\n  getAllCards(): Promise<Sets> {\r\n    let headers = new Headers({\"X-Mashape-Key\": \"HY0cJ4Jkl7mshqqWiolxzLFNuqQ4p1vXxc3jsnJLglrzEOvIyV\"});\r\n     return this.http.get(this.cardsUrl+\"cards\",{headers: headers})\r\n                .toPromise()\r\n                .then(response => response.json().data)\r\n                .catch(this.handleError);\r\n   }\r\n\r\n  getCardsBySet(set): Promise<Object[]> {\r\n    let headers = new Headers({\"X-Mashape-Key\": \"HY0cJ4Jkl7mshqqWiolxzLFNuqQ4p1vXxc3jsnJLglrzEOvIyV\"});\r\n     return this.http.get(this.cardsUrl+\"cards/sets/\"+set,{headers: headers})\r\n                .toPromise()\r\n                .then(response => JSON.parse(response.text()))\r\n                .catch(this.handleError);\r\n   }\r\n   private handleError(error: any) {\r\n    console.error('An error occurred', error);\r\n    return Promise.reject(error.message || error);\r\n  }\r\n\r\n  test(response){\r\n    console.log(response);\r\n    console.log(JSON.parse(response.text()))\r\n  }\r\n}\r\n"]}